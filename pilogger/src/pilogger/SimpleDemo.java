/*
 * $Id: SimpleDemo.java,v 1.3 2005-03-22 14:29:35 gkruk Exp $
 * 
 * $Date: 2005-03-22 14:29:35 $ $Revision: 1.3 $ $Author: gkruk $
 * 
 * Copyright CERN, All Rights Reserved.
 */
package pilogger;

import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Stroke;
import java.io.IOException;

import javax.swing.JFrame;
import javax.swing.JPanel;


import com.pi4j.io.i2c.I2CBus;
import com.pi4j.io.i2c.I2CDevice;
import com.pi4j.io.i2c.I2CFactory;
import com.pi4j.io.serial.Serial;
import com.pi4j.io.serial.SerialDataEvent;
import com.pi4j.io.serial.SerialDataListener;
import com.pi4j.io.serial.SerialFactory;
import com.pi4j.io.serial.SerialPortException;

import cern.jdve.Chart;
import cern.jdve.ChartInteractor;
import cern.jdve.ChartRenderer;
import cern.jdve.Scale;
import cern.jdve.Style;
import cern.jdve.data.DefaultDataSet;
import cern.jdve.demo.data.RandomDataGenerator;
import cern.jdve.graphic.Marker;
import cern.jdve.graphic.MarkerFactory;
import cern.jdve.renderer.ScatterChartRenderer;
import datachannel.DataChannelListener;
import datachannel.DataReceivedEvent;

/**
 * The class presents the simplest usage of the JDataViewer. It displays the specified data set using default renderer
 * (PolylineChartRenderer). In this demo we want to present just Y values - X values will be generated by the
 * DefaultDataSet. The class presents also some exemplary modifications that can be made.
 * 
 * @version $Id: SimpleDemo.java,v 1.3 2005-03-22 14:29:35 gkruk Exp $
 */
public class SimpleDemo extends JPanel implements DataChannelListener {
    private BMP085channels bmp085Probe;
    private GeigerChannel geigerCounter;
    private Font labelFont = new Font("Arial", Font.PLAIN, 8);
    
    private int dataCountTemperatureIn = 0;
    private int dataCountPressure = 0;

    public SimpleDemo() {
        initComponents();
        initCom();
        initI2C();
    }
    @Override
	public void dataReceived(DataReceivedEvent dataReceivedEvent) {
    	if (dataReceivedEvent.channel == bmp085Probe.pressureChannel) {
    		if (dataSetPressure.getDataCount() > 20000) {
    			dataSetPressure.remove(0, 10);
    		}
    		dataSetPressure.add(dataCountPressure, dataReceivedEvent.dataValue);
    		dataCountPressure++;
    	}
    	if (dataReceivedEvent.channel == bmp085Probe.temperatureChannel) {
    		if (dataSetTemperatureIn.getDataCount() > 20000) {
    			dataSetTemperatureIn.remove(0, 10);
    		}
    		dataSetTemperatureIn.add(dataCountTemperatureIn, dataReceivedEvent.dataValue);
    		dataCountTemperatureIn++;
    	}
    	if (dataReceivedEvent.channel == geigerCounter.geigerChannel) {
//    		dataset.add(dataset.getDataCount(), dataReceivedEvent.dataValue);
    	}
	}
    
    private void initI2C() {
    	try {
			final I2CBus bus = I2CFactory.getInstance(I2CBus.BUS_0);
			bmp085Probe = new BMP085channels(bus);
			bmp085Probe.addDataChannelListener(this);
		} catch (IOException e) {
			e.printStackTrace();
		}
    }
    
    private void initCom() {
    	try {
			final Serial serial = SerialFactory.createInstance();
			geigerCounter = new GeigerChannel(serial);
			geigerCounter.addDataChannelListener(this);
		} catch (SerialPortException e) {
			e.printStackTrace();
		}
    }
    
    private void initComponents() {
        setPreferredSize(new Dimension(280, 180));
        setLayout(new BorderLayout());
        add(createChart(), BorderLayout.CENTER);
    }


    private Chart createChart() {
        Chart chart = new Chart();
        chart.setDataSet(getDataSetTemperatureIn());
//        chart.addInteractor(ChartInteractor.ZOOM);
        chart.addYAxis(true, false);
        chart.getXScale().setLabelFont(labelFont);
        chart.getXScale().setLabelForeground(Color.gray);
        chart.getXScale().setForegroundColor(Color.gray);
        chart.getYScale().setLabelFont(labelFont);
        chart.getYScale().setLabelForeground(Color.gray);
        chart.getYScale().setForegroundColor(Color.gray);
        chart.getYScale(1).setLabelFont(labelFont);
        chart.getYScale(1).setLabelForeground(Color.gray);
        chart.getYScale(1).setForegroundColor(Color.gray);
        
        
        chart.getArea().setBackground(Color.black);
        chart.setBackground(Color.black);
        chart.getArea().setStyle(new Style(Color.black, Color.black));
        chart.getRenderer(0).setStyles(new Style[] {new Style(Color.white, Color.white), 
        		new Style(Color.gray, Color.gray)});
        chart.getXGrid().setVisible(false);
        chart.getYGrid().setVisible(false);
        chart.setAntiAliasing(false);
        chart.setAntiAliasingText(false);
        
        ScatterChartRenderer pressureRenderer = new ScatterChartRenderer(MarkerFactory.getMarker(Marker.CIRCLE), 2);
        pressureRenderer.setDataSet(getDataSetPressure());
        chart.addRenderer(1, pressureRenderer);
        
        
        return chart;
    }
    
        
    private DefaultDataSet dataSetTemperatureIn;
    private DefaultDataSet getDataSetTemperatureIn() {
    	if (dataSetTemperatureIn == null) {
    		dataSetTemperatureIn = new DefaultDataSet("data");
    	}
    	return dataSetTemperatureIn;
    }
    private DefaultDataSet dataSetPressure;
    private DefaultDataSet getDataSetPressure() {
    	if (dataSetPressure == null) {
    		dataSetPressure = new DefaultDataSet("data");
    	}
    	return dataSetPressure;
    }
    private DefaultDataSet dataSetGeiger;
    private DefaultDataSet getDataSetGeiger() {
    	if (dataSetGeiger == null) {
    		dataSetGeiger = new DefaultDataSet("data");
    	}
    	return dataSetGeiger;
    }

    public static void main(String[] args) {
        JFrame f = new JFrame("SimpleDemo");
        f.getContentPane().add(new SimpleDemo());
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.pack();
        f.setVisible(true);
    }
}